{"version":3,"sources":["components/Header.js","context/BudgetContext.js","components/InputForm.js","components/Login.js","components/Button.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","BudgetContext","createContext","range","income","expense","savings","name","loggedIn","toggleResults","BudgetContextProvider","props","budgetContext","useContext","useState","setName","setLoggedIn","setExpense","setSavings","setToggleResults","provider","Provider","value","children","InputForm","setRange","setIncome","useEffect","displayType","thousandSeparator","prefix","decimalScale","renderText","htmlFor","type","min","max","id","onChange","event","target","step","placeholder","Login","setEmail","setUrl","responseGoogle","response","profileObj","email","url","clientId","buttonText","onSuccess","onFailure","cookiePolicy","Button","currentToggle","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.121e9c75.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n    return (\n        <div>\n            <h1 className=\"header-text\">Bugetr</h1>\n        </div>\n    )\n}\n\nexport default Header;\n","import React, { useState, createContext, useContext } from 'react';\n\nexport const BudgetContext = createContext({\n    range: 15,\n    income: 0,\n    expense: 0,\n    savings: 0,\n    name: \"\",\n    loggedIn: \"\",\n    toggleResults: false\n});\n\n//  export const BudgetContextProvider;\n\nexport function BudgetContextProvider(props) {\n\n    const budgetContext = useContext(BudgetContext);\n\n    const [name, setName] = useState(budgetContext.name);\n    const [loggedIn, setLoggedIn] = useState(budgetContext.loggedIn);\n    const [expense, setExpense] = useState(budgetContext.expense);\n    const [savings, setSavings] = useState(budgetContext.savings);\n    const [toggleResults, setToggleResults] = useState(budgetContext.toggleResults);\n\n    const provider = {\n        expense,\n        setExpense: (expense) => {\n            setExpense(expense);\n        },\n        savings,\n        setSavings: (savings) => {\n            setSavings(savings);\n        },\n        name,\n        setName: (name) => {\n            setName(name);\n        },\n        loggedIn,\n        setLoggedIn: (loggedIn) => {\n            setLoggedIn(loggedIn);\n        },\n        toggleResults,\n        setToggleResults: (toggleResults) => {\n            setToggleResults(toggleResults);\n        },\n    };\n\n    return (\n        <BudgetContext.Provider value={provider}>\n            {props.children}\n        </BudgetContext.Provider>\n    );\n};\n\n","import React, {useContext, useState, useEffect} from 'react'\nimport NumberFormat from \"react-number-format\";\n\nimport { BudgetContext } from  '../context/BudgetContext';\n\nconst InputForm = () => {\n\n  const [range, setRange] = useState(15);\n  const [income, setIncome] = useState(0);\n  const [expense, setExpense] = useState(0);\n  const [savings, setSavings] = useState(0);\n\n  const budgetContext = useContext(BudgetContext);  \n\n      useEffect(() => {\n      setExpense((income/12) * range * 0.01 );\n    }, [income, range]);\n\n      useEffect(() => {\n        setSavings((income / 12) * (1 - (range * 0.01)))\n      }, [income, range]);\n\n\n    if (!budgetContext.loggedIn) {\n      return null;\n    }\n\n    if (budgetContext.toggleResults) {\n      return (\n        <section>\n          <div className=\"expense-container\">\n            <h3>Election Range:</h3>\n            <h4>{range}%</h4>\n\n\n          </div>\n\n        <div className=\"expense-container\">\n          <h3> Annual Income:</h3>\n\n          <NumberFormat\n            className=\"currency-number\"\n            value={income}\n            displayType={\"text\"}\n            thousandSeparator={true}\n            prefix={\"$\"}\n            decimalScale={2}\n            renderText={(value) => <div>{value}</div>}\n          />\n        </div>\n          <div className=\"expense-container\">\n            <h3> Monthly Expense:</h3>\n\n            <NumberFormat\n              className=\"currency-number\"\n              value={expense}\n              displayType={\"text\"}\n              thousandSeparator={true}\n              prefix={\"$\"}\n              decimalScale={2}\n              renderText={(value) => <div>{value}</div>}\n            />\n          </div>\n          <div className=\"expense-container\">\n            <h3> Monthly Savings:</h3>\n\n            <NumberFormat\n              className=\"currency-number\"\n              value={savings}\n              displayType={\"text\"}\n              thousandSeparator={true}\n              prefix={\"$\"}\n              decimalScale={2}\n              renderText={(value) => <div>{value}</div>}\n            />\n          </div>\n\n        </section>\n      )\n    }\n  \n\n    return (\n      <div>\n\n        <form className=\"budget-input\">\n          <label htmlFor=\"range-slider\">Select Election % </label>\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"30\"\n            value={range}\n            className=\"slider\"\n            id=\"range-slide\"\n            onChange={(event) => setRange(event.target.value)}\n          />\n          <p className=\"range-percentage\">{range}%</p>\n\n          <label htmlFor=\"income-amount\">Enter Annual Income</label>\n\n          <input\n            type=\"text\"\n            min=\"0\" \n            step=\"1\"\n            value={income}\n            placeholder=\"$\"\n            id=\"income-amount\"\n            onChange={(event) => setIncome(event.target.value)}\n          />\n\n          <div className=\"expense-container\">\n            <h3> Monthly Expense:</h3>\n\n            <NumberFormat\n              className=\"currency-number\"\n              value={expense}\n              displayType={\"text\"}\n              thousandSeparator={true}\n              prefix={\"$\"}\n              decimalScale={2}\n              renderText={(value) => <div>{value}</div>}\n            />\n          </div>\n          <div className=\"expense-container\">\n            <h3> Monthly Savings:</h3>\n\n            <NumberFormat\n              className=\"currency-number\"\n              value={savings}\n              displayType={\"text\"}\n              thousandSeparator={true}\n              prefix={\"$\"}\n              decimalScale={2}\n              renderText={(value) => <div>{value}</div>}\n            />\n          </div>\n        </form>\n      </div>\n    );\n}\n\nexport default InputForm;\n\n","import React, { useState, useContext } from 'react';\nimport GoogleLogin from \"react-google-login\";\n\nimport {BudgetContext} from '../context/BudgetContext';\n\nexport const Login = () => {\n\n    const budgetContext = useContext(BudgetContext);\n\n    const [email, setEmail] = useState(\"\");\n    const [url, setUrl] = useState(\"\");\n\n\n    const responseGoogle = (response) => {\n        budgetContext.setName(response.profileObj.name);\n        setEmail(response.profileObj.email);\n        setUrl(response.profileObj.url);\n        budgetContext.setLoggedIn(true);\n    };\n\n    if (budgetContext.loggedIn) {\n        return <p className=\"welcome-text\">Welcome to your monthly budget,<br/> {budgetContext.name} <hr /></p>\n    }\n\n    return (\n        <div className=\"login-container\">\n                <div>\n                    <h1>Login With Google</h1>\n                    <GoogleLogin\n                        clientId=\"61293796729-0fsefe1s50otl643rp5jchbvfikui0ce.apps.googleusercontent.com\"\n                        buttonText=\"Login\"\n                        onSuccess={responseGoogle}\n                        onFailure={responseGoogle}\n                        className=\"google-login\"\n                        cookiePolicy={\"single_host_origin\"}\n                    />\n                </div>\n        </div>\n    )\n}\n","import React, {useContext} from 'react';\n\nimport {BudgetContext} from '../context/BudgetContext';\n\nexport const Button = () => {\n\n    const { toggleResults, setToggleResults } = useContext(BudgetContext);\n\n    const budgetContext = useContext(BudgetContext);\n\n    const currentToggle = toggleResults;\n\n    if (!budgetContext.loggedIn || budgetContext.toggleResults) {\n        return null;\n    }\n\n    return (\n        <button onClick={() => setToggleResults(!currentToggle)}>\n            Confirm\n        </button>\n    )\n}\n","import React from 'react';\n\nimport Header from './components/Header';\nimport InputForm from './components/InputForm';\nimport {Login} from \"./components/Login\";\nimport {Button} from './components/Button';\n\nimport './App.scss';\n\nimport {BudgetContextProvider} from './context/BudgetContext';\n\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <main className=\"app-hub\">\n          <Header />\n          <BudgetContextProvider>\n            <Login />\n            <InputForm />\n            <Button />\n      </BudgetContextProvider>\n      </main>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}